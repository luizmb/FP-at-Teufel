Let the compiler work for you, so you write less and safer code, with fewer and better tests and safer refactoring.
Learning Swift Generics in depth, as well as protocol associated types is what we recommend. They have some limitations
that can be overcome through techniques like type-erasure and protocol witness. Understanding that is also very
important and will help when writing composition of data structures.

Finally, always prefer enums over protocols or inheritance when all possible implementations are a closed list that's
never (or rarely) expected to change. And when using enums, avoid use of "default", let the compiler warn you when you
introduce a new case.

One warning here, by heavily using generics it can make your build slower. In that case, avoiding type-inference,
specially in closures with generics. So please be careful, Swift is improving this a lot recently but there are still
some hiccups.

This is the most important one.

Real composition can only be achieved through pure functions. When composing two pure functions, the return is a pure
function. If the pure function is a building block, composition is the glue that permanently joins them.

It's usually created by writing a higher-order function and it's very generic and reusable, and in fact you only have to
write tests once, to make sure the composition is doing the correct thing, after that you can compose other functions
in multiple different ways without the need to write more tests for them. This not only deletes a lot of code, deletes a
lot of tests.

Given a function from A to B and another from B to C, we can be sure that the composition A to C succeeds, as long as
both functions are pure. The easiest implementation would be a compose function generic over A, B and C, that receives
two functions, calls the first and then the second, nothing fancy. In fact, it's impossible to write this function
incorrectly.

Now we can use it to compose two functions, the first is square-root, which takes a Double and returns a Double, the
second is called stringify, that given a Double returns a String. They compose because:
- The return of one is the input of the other, and
- We know for sure they are both pure

Composition of them, which we'll call squareRootAndStringify, goes from Double directly to String, running two steps.

If we give it the Double number 4, we get the String "2.0"

Now the same using custom operators.

Finally, we saw in the previous topic that pure functions also can return a value that wraps the effect, not running it.
Because they are pure, we can also compose them.

Download is a function that, given an URL, will return a Promise of (NS)Data. Promise should not run the effect, only
be a reprensentation of it. We have a second function called install, that given (NS)Data will perform some async IO
task and return Void, but because this IO is also an effect the real return type is Promise<Void, Error>.

We can compose them, because:
- The return of one is Promise of (NS)Data, which we can think as Data surrounded by some context, and the input of the
second is exactly (NS)Data.
- We know for sure they are both pure, and they don't execute any effect.

Composition can be achieved via function or custom operator.

This is the shape of this "compose" function, and there's something familiar with this shape.

It is precisely flatMap!

FlatMap is a very powerful function that helps us to merge nested contexts of the same type into one:
- Array of Arrays into one-level Array.
- Optional of Optional into one-level Optional.
- Result of Result into one-level Result.
- Promise of Promise into one-level Promise.
- Publisher of Publishers into one-level Publisher.
and many many more.

So we can rewrite this composition by calling the first function and flatMapping the second.

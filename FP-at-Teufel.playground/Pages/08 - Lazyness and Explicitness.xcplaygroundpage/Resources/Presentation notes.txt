Lazyness and Explicitness about effects: Be very explicit when something runs, and postpone this as much as you can,
gathering all you need from different layers of your app, and once you have everything and you're in the layer you allow
effects, call .run or some very explicit function showing that something is about to start.

It's important to represent effects as values, composing them without running. There's a design pattern called
"functional core, imperative shell" which suggests that our core should be totally free of running effects, so everything
is completely lazy. On the boundaries of the system you have a single place where effects are allowed, and this place is
our "imperative shell", responsible for starting the whole use case after the core has composed everything as a single
type, a value representing the whole effects system. The types should represent both, happy path and all possible
unhappy paths.

We have to know exactly when effects start, so it's very important to use proper verbs for such actions. Good function
names are "run", "call", "perform", "execute", "inject". By doing this, we know that there's no side-effect, but it's an
expected effect.

In this example, the promise represents the effect, but it doesn't run the effect because it's lazy, so the function
remains pure. Even after providing all required parameters, we still don't have side-effects.

But at this point, in the imperative shell, we call "run" and we know that something potentially "dangerous" will happen.

Be careful about the type Future in Combine, it's not lazy. Use always `Deferred<Future<HappyPath, UnhappyPath>>`
instead.

I'll link some talks about Functional Core, Imperative Shell

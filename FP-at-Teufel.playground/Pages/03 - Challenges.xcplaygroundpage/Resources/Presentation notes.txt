The development of our apps presents some unique challenges and some more familiar, and we'd like to share how we managed to overcome them through functional programming.

- Async programming
We control multiple speakers in the network at the same time, and sometimes we want to group these requests, either in series or in parallel, treat errors for all possible combinations of responses, avoid race conditions and to notify the progress to multiple interested parts.

Callbacks, semaphores, dispatch groups and OperationQueue are designed to handle those problems, but they're ad-hoc solutions that have to be reimplemented, tested and to have bugs fixed over and over again. And it's not always easy to get it right, so many things can go wrong such as memory management, race conditions and performance issues.

- Realtime sync with remote source of truth
Our state has to be in sync with the speakers all the time, as fast as possible. Multiple phones and tables can be connected to the same speakers controlling songs and volume. Users can use physical buttons on the speakers to change volume or start playback. The app must be resilient to sync all this data all the time and resolve possible state conflicts.

We heavily rely on throttling and debouncing for some parts.

- Multiple communication protocols
We use many different communication protocols, in different flavours, some subscribed via delegates, some via closure, some of them we have to re-subscribe every time we get a new value. Some are bidirectional.

We should never introduce booleans and other variables to control the flow, this usually leads to inconsistent state, race conditions, and other bugs.

- Modularity / Reuse code in multiple apps
We want to reuse code as much as we can inside the same project, and as much as we can among different projects. Most of these projects have completely different business requirements, technology and communication protocols.

FP abstractions are perfect for that.

- Testability
We want test everything and easily.

If testing requires a lot of ceremony, developers won't write tests, that's the truth.

At the same time we want less code to be tested, so avoiding ad-hoc solutions by centralising fundamental problems in data-structures makes you test them only once.

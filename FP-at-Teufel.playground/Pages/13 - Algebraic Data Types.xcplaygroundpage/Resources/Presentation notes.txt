Algebraic Data Type: this is a very long topic and there are lots of good talks you can find on the web about this. It's not super practical but it helps you to think about Swift types in a very different way, and as conclusion choosing better between structs and enums, or understanding better Void and Never, impossible functions and also composition.

```
Never = 0
Void = 1
Bool = 2
struct/tuples = *
enum = +
function = ^
Optional = Type + 1
Curry: (A, B) -> C == (A) -> (B) -> C  because  C ^ (A * B) == C ^ B ^ A
```

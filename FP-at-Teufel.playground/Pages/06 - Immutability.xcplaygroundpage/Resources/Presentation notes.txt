Embrace immutability. It allows us to run code in isolation and confidence that nothing else is affected by this code,
it also allows us to avoid concurrency problems and race conditions. Using value types also helps preventing memory
leaks. Finally, when data is immutable we stop wanting to store this state as a source-of-truth, instead, we want to
keep this information in a constant flow of transformation.

Prefer value types - structs or enums - over classes. Whenever possible, use `let` instead of `var`. And also prefer
calculating new object over using setters or assignment. That way, you don't reuse anything, also discard it and create
a new one, so things are never still, but they are always moving.

In real world apps we eventually need State and we need mutation. In that case, group as much state as you can and make
all these parts to act as one, mutate as one, from a single function and under complete surveillance, this is your
consistency checker.

Even better if you have the state of your app in a single place, for the whole app, being mutated only by a single
function that guarantees thread-safety and consistency.

Make sure to distinguish between State and derived state, being the first one an unique piece of information and the
second something that can be easily and cheapily calculated.

Algebraic Data Type: this is a very long topic and there are lots of good talks you can find on the web about this.
It's not super practical but it helps you to think about Swift types in a very different way, as if each type was a number of possible constructions
that type can have, and structs, enums and functions were operations we perform with those numbers. That way we can refactor our data structures and
still have the same representation, or improve our data structures to have only certain possible combinations and avoid creating data structures that
are too much flexible and allow wrong state representation.
